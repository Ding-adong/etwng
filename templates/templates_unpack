#!/usr/bin/env ruby

require "pp"
require "fileutils"

class Templates
  attr_accessor :ofs, :data
  def initialize(path)
    @data = File.open(path, 'rb', &:read)
    @ofs = 0
  end
  
  def size
    @data.size
  end
  
  def get(sz)
    raise "Trying to read past end of file" if @ofs + sz > @data.size
    rv = @data[@ofs, sz]
    @ofs += sz 
    rv
  end
  
  def get_u4
    get(4).unpack("V")[0]
  end
  
  def get_ascii(n)
    get(n)[/\A[^\x00]+/]
  end

  def eof?
    @ofs == @data.size
  end
  
  def parse(output_dir_path)!
    record_count = get_u4
    
    record_count.times{|i|
      init_ofs = @ofs
      # individual records
      name = get_ascii(256)
      # pic = get(244)
      sz = get_u4
      x = get_u4
      raise "Initial offset incorrect: #{x} != #{init_ofs}" unless x == init_ofs
      data = get(sz)

      # path = "out/%08d-%s" % [i+1, name]
      path = "%s/%08d-%s" % [output_dir_path, i+1, name]
      File.open(path, 'wb'){|fh|
        fh.write(data)
      }
    }
    raise "Extra data after end of file" unless eof?
  end
end


input_file_name = ARGV[0]
output_dir_path = ARGV[1]

puts "Removing output directory before populating: %s" % [output_dir_path]
FileUtils.rm_rf(output_dir_path)
FileUtils.mkdir_p(output_dir_path)
puts "Parsing file: %s" % [input_file_name]
Templates.new(input_file_name).parse(output_dir_path)
puts "Finished parsing file!"
