#!/usr/bin/env ruby

require "pp"
require "fileutils"

class File
  def self.write(path, cnt)
    File.open(path, 'wb'){|fh| fh.write(cnt)}
  end
end

class TRecord
  attr_accessor :ofs, :data, :path
  def initialize(path)
    @path = path
    @data = File.open(path, 'rb', &:read)
    @ofs = 0
  end

  def size
    @data.size
  end

  def get(sz)
    raise "Trying to read past end of file" if @ofs + sz > @data.size
    rv = @data[@ofs, sz]
    @ofs += sz
    rv
  end

  def get_u4
    get(4).unpack1("V")
  end

  def get_i4
    get(4).unpack1("l")
  end

  def get_u2
    get(2).unpack1("v")
  end

  def get_byte
    get(1).unpack1("C")
  end

  def get_str
    get(get_u2)
  end

  def get_bool
    v = get_byte
    if v == 0
      false
    elsif v == 1
      true
    else
      raise "Invalid Boolean value #{v}"
      v
    end
  end

  def eof?
    @ofs == @data.size
  end

  def bytes_left
    @data.size - @ofs
  end

  def parse_embedded_tga(output_dir_path)!
    save_ofs = @ofs
    # The number of bytes that the image ID field consists of.
    # The image ID field can contain any information, but it is common for it to contain the date and time the image was created or a serial number.
    id_len = get_byte
    # 0 if image file contains no color map
    color_map = get_byte
    # 2 uncompressed true-color image
    image_type = get_byte
    cmap_spec = get(5) # ignore
    xorig = get_u2
    yorig = get_u2
    xsize = get_u2
    ysize = get_u2
    depth = get_byte
    imgdsc = get_byte
    raise "Go to hell" unless [id_len, color_map, image_type, depth, imgdsc] == [0,0,2,32,8]

    $tga_cnt += 1
    fname = "%s/%08d.tga" % [output_dir_path, $tga_cnt]
    sz = 4*xsize*ysize
    @ofs += sz
    File.write(fname, @data[@ofs-18-sz, 18+sz])
    fname
  end

  def parse(output_dir_path)!
    puts "Parsing #{path} of size #{size}"
    tgas = get_u4
    tgas.times{|i|
      name = get_str
      fname = parse_embedded_tga(output_dir_path)
      puts "Tga(#{i+1}/#{tgas}) '#{name}' saved to '#{fname}'"
    }

    p [:state_id, get_i4]
    p [:name, get_str]
    p [:xofs, get_i4]
    p [:yofs, get_i4]
    p [:has_parent_string, has_parent_name = get_bool]
    p [:flags, flags = (0..4).map{ get_bool }]
    p [:byte0, b0 = get_byte]
    if has_parent_name
      p [:parent_name, get_str]
    end
    ## This is the last point where we have some clue what's going on, everything after that is a guess

    p [:short0, s0 = get_u2]
    @ofs -= 2
    p [:str0, (get_str rescue nil)]

    # if flags[0]
    #   p [:str, get_str]
    # end
    # if [b0, flags] == [0, [true, true, true, false, false]]
    #   p [:xxx, get_str]

    # if [b0, s0, flags] == [0,0,[true, false, true, false, false]]
    #   p [:xxx, get_str]
    # end

    puts "#{bytes_left} bytes left"
  end
end


input_dir_path = ARGV[0]
output_dir_path = ARGV[1]

puts "Removing output directory before populating: %s" % [output_dir_path]
FileUtils.rm_rf(output_dir_path)
FileUtils.mkdir_p(output_dir_path)
puts "Parsing tga files in directory: %s" % [input_dir_path]
# FileUtils.rm_rf "tgas"
# FileUtils.mkdir_p "tgas"
$tga_cnt = 0

Dir["%s/*" % [input_dir_path]].each{|fn|
  tr = TRecord.new(fn)
  tr.parse(output_dir_path)
  puts ""
}
puts "Finished parsing tga files!"
