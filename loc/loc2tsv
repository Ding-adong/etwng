#!/usr/bin/env ruby

require "pp"
require "csv"
require "pathname"
require "fileutils"

class LocFile
  def initialize(path)
    @path = path
    @data = File.open(path, 'rb', &:read)
    @ofs = 0
  end
  def bytes_left
    @data.size - @ofs
  end
  def get(size)
    raise "Trying to read data past end of file in #{@path}" if @ofs + size > @data.size
    rv = @data[@ofs, size]
    @ofs += size
    rv
  end
  def get_u
    get(4).unpack("V")[0]
  end
  def get_u2
    get(2).unpack("v")[0]
  end
  def get_s
    get(get_u2*2).unpack("v*").pack("U*")
  end
  def get_byte
    get(1).unpack("C")[0]
  end
  def get_bool
    rv = get_byte
    raise "Booleans must be 0 or 1, not #{rv} in #{@path}" if rv > 1
    rv == 1
  end
  def get_magic!
    magic = get(6)
    raise "Not a LOC file: #{@path} [magic #{magic.inspect}]" unless magic.bytes == "\xFF\xFELOC\x00".bytes
  end
  def parse!
    get_magic!
    raise "Bad version of LOC file: #{@path}" unless get_u == 1
    rv = []
    get_u.times do
      yield [get_s, get_s, get_bool]
    end
    raise "Data after end of file: #{bytes_left} bytes in #{@path}" unless bytes_left == 0
    rv
  end
end

def loc2tsv(source, target)
  CSV.open(target, "wb", :col_sep => "\t") do |tsv|
    LocFile.new(source).parse! do |line|
      tsv << line
    end
  end
end

unless ARGV.size == 2
  STDERR.puts "#{$0} file.loc file.tsv"
  STDERR.puts "#{$0} loc_dir/ tsv_dir/"
  exit 1
end

if File.file?(ARGV[0])
  loc2tsv(ARGV[0], ARGV[1])
else
  source_root, target_root = Pathname(ARGV[0]), Pathname(ARGV[1])
  sources = []
  source_root.find{|file_name| sources << file_name if file_name.file?}
  sources.sort.each do |source_path|
    relative_path = source_path.relative_path_from(source_root)
    target_path   = Pathname((target_root+relative_path).to_s.sub(/\.loc\z/, ".tsv"))
    FileUtils.mkdir_p target_path.dirname
    loc2tsv(source_path, target_path)
  end
end
