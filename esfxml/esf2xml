#!/usr/bin/env ruby

require "pp"

class String
  # Escape string for output as XML text (< > &)
  def xml_escape
    replacements = {"<" => "&lt;", ">" => "&gt;", "&" => "&amp;" }
    gsub(/([<>&])/) { replacements[$1] }
  end
  # Escape characters for output as XML attribute values (< > & ' ")
  def xml_attr_escape
    replacements = {"<" => "&lt;", ">" => "&gt;", "&" => "&amp;", "\"" => "&quot;", "'" => "&apos;"}
    gsub(/([<>&\'\"])/) { replacements[$1] }
  end
end

module EsfBasicBinaryOps
  def get_u4
    rv = @data[@ofs,4].unpack("V")[0]
    @ofs += 4
    rv
  end
  def get_i4
    rv = @data[@ofs,4].unpack("l")[0]
    @ofs += 4
    rv
  end
  def get_i2
    rv = @data[@ofs,2].unpack("s")[0]
    @ofs += 2
    rv
  end
  def get_float
    rv = @data[@ofs,4].unpack("f")[0]
    @ofs += 4
    rv
  end
  def get_u2
    rv = @data[@ofs,2].unpack("v")[0]
    @ofs += 2
    rv
  end
  def get_bytes(sz)
    rv = @data[@ofs, sz]
    @ofs += sz
    rv
  end
  def get_ascii
    get_bytes(get_u2)
  end
  def get_str
    get_bytes(get_u2*2).unpack("v*").pack("U*")
  end
  def get_byte
    rv = @data[@ofs]
    @ofs += 1
    rv
  end
  def get_bool
    case b = get_byte
    when 1
      true
    when 0
      false
    else
      warn "Weird boolean value: #{b}"
      true
    end
  end    
  def with_temp_ofs(tmp)
    orig = @ofs
    begin
      @ofs = tmp
      yield
    ensure
      @ofs = orig
    end
  end
  def size
    @data.size
  end
end

class EsfParser
  include EsfBasicBinaryOps
  
  attr_accessor :ofs
  attr_reader :data, :out
  attr_reader :magic, :node_types

  def initialize(in_fh, out_fh)
    @data = in_fh.read
    @out_fh = out_fh
    @out = XMLPrinter.new("")
    @ofs = 0
    get_header
  end
  def get_header
    case magic = get_u4
    when 0xABCD
      @magic = [0xABCD]
    when 0xABCE
      a = get_u4
      b = get_u4
      raise "Incorrect ESF magic followup" unless a == 0
      @magic = [0xABCE, a, b]
    else
      raise "Incorrect ESF magic: %X" % magic
    end
    with_temp_ofs(get_u4) {
      @node_types = get_node_types
    }
  end
  def get_node_types
    (0...get_u2()).map{ get_ascii.to_sym }
  end
  def inspect
    "EsfParser(#{@ofs})"
  end
  def get_node_type
    @node_types[get_u2]
  end
  def convert_until_ofs!(ofs_end)
    convert_value! while @ofs < ofs_end
  end
  def convert_value!
    case node_type = get_byte
    when 0x08
      @out.out!("<u>#{get_u4}</u>")
    when 0x04
      @out.out!("<i>#{get_i4}</i>")
    when 0x0c
      @out.out!("<v2 x='#{get_float}' y='#{get_float}'/>")
    when 0x07
      @out.out!("<u2>#{get_u2}</u2>")
    when 0x0a
      @out.out!("<flt>#{get_float}</flt>")
    when 0x48
      bindata = get_ofs_bytes
      raise "Size of 0x48 type binary data must be in multiples of 4" if bindata.size & 3 != 0
      enc_bindata = bindata.unpack("l*").join(" ")
      @out.out!("<i4_ary>#{enc_bindata}</i4_ary>")
    when 0x80
      node_type   = get_node_type
      version     = get_byte
      ofs_end     = get_u4
      @out.tag!("rec", :type=>node_type, :version=>version) do
        convert_until_ofs!(ofs_end)
      end
    when 0x81
      node_type = get_node_type
      version   = get_byte
      ofs_end   = get_u4
      count     = get_u4
      @out.tag!("ary", :type=>node_type, :version=>version) do
        count.times do
          @out.tag!("rec", :type=>node_type) do
            convert_until_ofs!(get_u4)
          end
        end
      end
    when 0x01
      @out.out!(get_bool ? "<yes/>" : "<no/>")
    when 0x0e
      @out.out!("<s>#{get_str.xml_escape}</s>")
    when 0x0f
      @out.out!("<asc>#{get_ascii.xml_escape}</asc>")
    when 0x06
      @out.out!("<byte>#{get_byte}</byte>")
    when 0x10
      @out.out!("<u2x>#{get_u2}</u2x>")
    when 0x00
      @out.out!("<i2>#{get_i2}</i2>")
    when 0x0d
      @out.out!("<v3 x='#{get_float}' y='#{get_float}' z='#{get_float}'/>")
    when 0x47
      bindata = get_ofs_bytes
      raise "Size of 0x47 type binary data must be in multiples of 2" if bindata.size % 2 != 0
      enc_bindata = bindata.unpack("v*").join(" ")
      @out.out!("<u2_ary>#{enc_bindata}</u2_ary>")
    when 0x4a
      bindata = get_ofs_bytes
      raise "Size of 0x4a type binary data must be in multiples of 4" if bindata.size % 4 != 0
      enc_bindata = bindata.unpack("f*").join(" ")
      @out.out!("<flt_ary>#{enc_bindata}</flt_ary>")
    when 0x4c
      bindata = get_ofs_bytes
      raise "Size of 0x4a type binary data must be in multiples of 8" if bindata.size % 8 != 0
      enc_bindata = bindata.unpack("f*").join(" ")
      @out.out!("<v2_ary>#{enc_bindata}</v2_ary>")
    when 0x4d
      bindata = get_ofs_bytes
      raise "Size of 0x4a type binary data must be in multiples of 12" if bindata.size % 12 != 0
      enc_bindata = bindata.unpack("f*").join(" ")
      @out.out!("<v3_ary>#{enc_bindata}</v3_ary>")
    when 0x40..0x4F
      bindata = get_ofs_bytes
      enc_bindata = bindata.unpack("H2" * bindata.size).join(" ")
      code = "bin%X" % (node_type-0x40)
      @out.out!("<#{code}>#{enc_bindata}</#{code}>")
    else
      raise "Unknown type 0x%x? at #{context}" % node_type
    end
  end
  def get_ofs_bytes
    ofs_end = get_u4
    sz = ofs_end-@ofs
    get_bytes(sz)
  end
  def context
    "#{@ofs} [ #{@data[@ofs, 32].unpack("C*").join(" ")}]"
  end
  def convert!
    @out.tag!("esf", :magic => @magic.join(" ")) do
      @out.tag!("node_types") do
        node_types.each do |n|
          @out.tag!("node_type", :name => n)
        end
      end
      convert_value!
    end
    @out_fh.print @out.out
  end
end

class XMLPrinter
  attr_reader :out
  def initialize(out)
    @out = out
    @stack = []
    @indent = Hash.new{|ht,k| ht[k]=" "*k}
  end
  def tag!(name, *args)
    raise ArgumentError.new("Too many arguments") if args.size > 2
    
    attrs_s = ""
    cnt = nil

    if args.size == 2
      attrs_s = attrs_to_s(args[0])
      cnt = args[1]
    elsif args.size == 1
      if args[0].is_a?(Hash)
        attrs_s = attrs_to_s(args[0])
      else
        cnt = args[0]
      end
    end
    
    cnt = nil if cnt == ""

    if block_given?
      raise ArgumentError.new("Cannot use content argument and bolck at the same time") if cnt
      out! "<#{name}#{attrs_s}>"
      @stack << name
      yield
      @stack.pop
      out! "</#{name}>"
    elsif cnt.nil?
      out! "<#{name}#{attrs_s}/>"
    else
      out! "<#{name}#{attrs_s}>#{cnt}</#{name}>"
    end
  end
  def out!(str)
    @out << @indent[@stack.size] << str << "\n"
  end
  private
  def attrs_to_s(attrs={})
    #attrs.to_a.map{|k,v| k=k.to_s; [k, " #{k}='#{v.to_s.xml_attr_escape}'"]}.sort.map{|k,a| a}.join
    attrs.to_a.map{|k,v| " #{k}='#{v.to_s.xml_attr_escape}'"}.join
  end
end

esf = EsfParser.new(STDIN, STDOUT)
esf.convert!
