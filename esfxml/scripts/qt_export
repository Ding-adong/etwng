#!/usr/bin/env ruby

require "rubygems"
require "fileutils"
require "nokogiri"
require "pathname"
require "pp"

class QuadTreeBitArray
  def initialize(path)
    content = File.open(path, 'rb', &:read)                                                                                                      
    @doc = Nokogiri::XML.parse(content)
    parse!
  end
  
  def parse!
    root = @doc.children[0]
    @version_2 = (root["version"] == "2")
    @xsz, @ysz, @qsz = root.xpath("u").map{|x| x.content.to_i}
    @padding_line = "\xFF" * @qsz
    @map = (0...@qsz).map{ @padding_line.dup }
    node = root.xpath("*")[-1]    
    if @version_2 # S2TW
      bin_data = node.content.strip.split(/[;,\s]+/).map{|x| x.to_i(16)}
      draw_quad_tree_s2tw!(bin_data, 0, @qsz-1, 0, @qsz-1)
    else # ETW/NTW
      draw_quad_tree!(node, 0, @qsz-1, 0, @qsz-1)
    end
  end

  def fill!(x0, x1, y0, y1)
    fill_line = "\x00" * (x1-x0+1)
    (y0..y1).each{|y|
      @map[y][x0..x1] = fill_line
    }
  end
  
  def draw_quad_tree_s2tw!(bin_data, x0, x1, y0, y1)
    u = bin_data.shift
    if u == 0
      ysz = (y1-y0+1)
      xsz = (x1-x0+1)
      lines = bin_data.shift(8).reverse.map{|line_code| draw_line(xsz, line_code)}
      (0...ysz).each{|y|
        @map[y0 + y][x0, xsz] = lines[(y*8)/ysz]
      }
    else
      xm = (x0+x1)/2
      ym = (y0+y1)/2
      quads = [
        [u&3,      x0,   xm, y0,   ym],
        [(u>>2)&3, xm+1, x1, y0,   ym],
        [(u>>4)&3, x0,   xm, ym+1, y1],
        [(u>>6)&3, xm+1, x1, ym+1, y1],
      ].each{|cmd, xs, xe, ys, ye|
        if cmd == 0
          raise "CMD should not be 0"
        elsif cmd == 1
          draw_quad_tree_s2tw!(bin_data, xs, xe, ys, ye)
        elsif cmd == 2
          # empty, skip as preinitialized
        elsif cmd == 3
          # full
          fill!(xs, xe, ys, ye)
        end
      }
    end
  end
  
  def draw_quad_tree!(node, x0, x1, y0, y1)
    if node.name == "quad_tree_node"
      xm = (x0+x1)/2
      ym = (y0+y1)/2
      children = node.xpath("*")
      raise "Wrong number of children" unless children.size == 4
      # What was their order again?
      draw_quad_tree!(children[0], x0,   xm, y0,   ym)
      draw_quad_tree!(children[1], xm+1, x1, y0,   ym)
      draw_quad_tree!(children[2], x0,   xm, ym+1, y1)
      draw_quad_tree!(children[3], xm+1, x1, ym+1, y1)
    elsif node.name == "quad_tree_leaf"
      mask = node.content.to_i(16)
      return if mask == 0 # map is preinitialized to all-0s for performance
      lines = [mask].pack("Q").unpack("C*").reverse
      ysz = (y1-y0+1)
      xsz = (x1-x0+1)
      lines = lines.map{|line_code| draw_line(xsz, line_code)}
      (0...ysz).each{|y|
        @map[y0 + y][x0, xsz] = lines[(y*8)/ysz]
      }
    else
      raise "Unknown node type #{node.name}"
    end
  end
  
  def draw_line(size, line)
    (0...size).map{|x| line[(x*8)/size] == 1 ? "\x00" : "\xFF"}.join
  end
  
  def map_padding
    @map[0...@qsz-@ysz]
  end
  
  def map_relevant
    @map[@qsz-@ysz..-1]
  end
  
  def save!(pgm_path)
    if @version_2
      @xsz = @ysz = @qsz # disable unpadding
    else
      raise "Only files with XSZ=QSZ supported, here: xsz=#{@xsz},ysz=#{@ysz},qsz=#{@qsz}" unless @xsz==@qsz
      raise "Padding contains non-zeroes" unless map_padding.all?{|line| line == @padding_line }
    end
    File.open(pgm_path, 'wb'){|fh|
      fh.print "P5\n#{@xsz} #{@ysz}\n255\n", map_relevant.join
    }
  end
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} quadtree.xml quadtree.pgm"
  STDERR.puts "   or: #{$0} directory_in directory_out"
  exit 1
end

source = Pathname(ARGV[0])
target = Pathname(ARGV[1])

if source.directory?
  sources = []
  source.find do |source_file|
    sources << source_file if source_file.file?
  end
  sources.sort.each do |source_file|
    target_subdir   = target + source_file.dirname.relative_path_from(source)
    target_basename = source_file.basename(".xml").to_s + ".pgm"
    target_file = target_subdir + target_basename
    FileUtils.mkdir_p target_subdir
    QuadTreeBitArray.new(source_file).save!(target_file)
  end
else
  QuadTreeBitArray.new(source).save!(target)
end
