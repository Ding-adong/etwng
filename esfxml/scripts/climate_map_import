#!/usr/bin/env ruby

Colors = ["\x00", "\xFF", "\xAA", "\x77"].map{|r|
           ["\x00", "\xFF", "\xAA", "\x77"].map{|g|
             ["\x00", "\xFF", "\xAA", "\x77"].map{|b|
              r+g+b
             }
           }
         }.flatten

def parse_ppm(path_in)
  File.open(path_in, 'rb'){|fh_in|
    p5 = fh_in.readline
    sz = fh_in.readline
    l255 = fh_in.readline
    data_in = fh_in.read

    raise "Format error" unless p5 == "P6\n" and l255 == "255\n" and sz =~ /\A(\d+) (\d+)\n\z/
    xsz, ysz = $1.to_i, $2.to_i
    raise "Bad file size" unless data_in.size == xsz * ysz * 3
    return [xsz, ysz, data_in]
  }
end

def convert!(path_in, path_out)
  xsz, ysz, data_in = parse_ppm(path_in)

  known_colors = {}
  Colors.each_with_index{|c,i|
    known_colors[c] = [i].pack("C")
  }

  data_out = ""
  (data_in.size/3).times{|i|
    c = data_in[i*3,3]
    ci = known_colors[c]
    raise "Unknown color #{c.unpack("C*").inspect}" unless ci
    data_out << ci
  }

  File.open(path_out, 'wb'){|fh_out|
    fh_out.print "P5\n#{xsz} #{ysz}\n255\n" + data_out
  }
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} input_file.ppm output_file.pgm"
end

path_in, path_out = *ARGV

convert!(path_in, path_out)
