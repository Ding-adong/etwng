#!/usr/bin/env ruby

require 'rubygems'
require 'libxml'

include LibXML

class EsfBuilder
  include XML::SaxParser::Callbacks
  
  attr_reader :data, :stack

  def initialize
    @data = ""
    @node_types = nil
    @lookup = Hash.new{|ht,k| raise "Unknown node name #{k}"}
    @stack = [{:chara => false, :nest => true}]
  end

  def put(bytes)
    @data << bytes
  end

  def on_start_element(element, attributes)
    # STDERR.puts [:start, element, attributes].inspect
    
    raise "Illegal place for nested element: #{@stack[-1].inspect}" unless @stack[-1][:nest]
    
    ofs = @data.size
    finalization = {}
    chara_ok = false
    nest_ok = false
    
    case el = element.to_sym
    when :yes
      put("\x01\x01")
    when :no
      put("\x01\x00")

    when :"v2"
      put([0x0c, attributes["x"].to_f, attributes["y"].to_f].pack("Cff"))
    when :"v3"
      put([0x0d, attributes["x"].to_f, attributes["y"].to_f, attributes["z"].to_f].pack("Cfff"))

    when :"i2"
      put("\x00")
      chara_ok = true
    when :"u2"
      put("\x07")
      chara_ok = true
    when :"u2x"
      put("\x10")
      chara_ok = true
    when :"i"
      put("\x04")
      chara_ok = true
    when :"u"
      put("\x08")
      chara_ok = true
    when :"byte"
      put("\x06")
      chara_ok = true
    when :"s"
      put("\x0e")
      chara_ok = true
    when :"asc"
      put("\x0f")
      chara_ok = true
    when :"flt"
      put("\x0a")
      chara_ok = true

    when :"rec"
      if @stack[-1][:el] == :ary
        @stack[-1][:children] += 1
        put("\x00\x00\x00\x00")
      else
        finalization = {:ofs => ofs + 4}
        name_code = @lookup[attributes['type']]
        version = attributes['version'].to_i
        put([0x80, name_code, version, 0].pack("CvCV"))
      end

      nest_ok = true

    when :"ary"
      name_code = @lookup[attributes['type']]
      version = attributes['version'].to_i
      put([0x81, name_code, version, 0, 0].pack("CvCVV"))
      finalization = {:children => 0}
      nest_ok = true

    when :"u2_ary"
      put("\x47")
      chara_ok = true
    when :"i4_ary"
      put("\x48")
      chara_ok = true
    when :"flt_ary"
      put("\x4c")
      chara_ok = true
    when :"bin"
      put([0x40 + attributes['type'].to_i].pack("C"))
      chara_ok = true
    when :"esf"
      @magic = attributes["magic"].split(/\s+/).map{|x| x.to_i}
      put(@magic.pack("V*"))
      finalization[:end_of_headers] = @data.size
      put([0].pack("V"))
      nest_ok = true

    when :"node_types"
      @node_types = []
      nest_ok = true

    when :"node_type"
      name = attributes["name"]
      raise "Name already set: #{name}" if @lookup.has_key?(name)
      @lookup[name] = @node_types.size
      @node_types << name

    else
      raise "No idea what to do with #{element} open means"
    end

    @stack << {:el => el, :ofs => ofs, :chara => chara_ok, :buf => "", :nest => nest_ok}.merge(finalization)
  end
  
  def adjust_ofs(at)
    @data[at, 4] = [@data.size].pack("V")
  end
  
  def on_end_element(element)
    # STDERR.puts [:end, element].inspect
    ctx = @stack.pop
    el = element.to_sym
    no_finalization = [:node_types, :node_type, :yes, :no, :v2, :v3]
    return if no_finalization.include?(el)
    
    case el
    when :asc
      str = ctx[:buf]
      put([str.size].pack("v"))
      put(str)
    when :s
      uchars = ctx[:buf].unpack("U*")
      put([uchars.size, *uchars].pack("v*"))
    when :u, :i
      put([ctx[:buf].to_i].pack("V"))
    when :u2, :i2, :u2x
      put([ctx[:buf].to_i].pack("v"))
    when :byte
      put([ctx[:buf].to_i].pack("C"))
    when :flt
      put([ctx[:buf].to_f].pack("f"))

    when :rec
      adjust_ofs(ctx[:ofs])
    when :ary
      @data[ctx[:ofs]+4, 8] = [@data.size, ctx[:children]].pack("VV")


    when :"u4_ary", :"i4_ary"
      elems = ctx[:buf].split.map(&:to_i)
      put([@data.size+4*elems.size+4].pack("V"))
      put(elems.pack("V*"))

    when :"u2_ary", :"i2_ary"
      elems = ctx[:buf].split.map(&:to_i)
      put([@data.size+2*elems.size+4].pack("V"))
      put(elems.pack("v*"))

    when :"flt_ary"
      elems = ctx[:buf].split.map(&:to_f)
      put([@data.size+4*elems.size+4].pack("V"))
      put(elems.pack("f*"))

    when :"bin"
      elems = ctx[:buf].split.map{|x| x.to_i(16)}
      put([@data.size+elems.size+4].pack("V"))
      put(elems.pack("C*"))

    when :"esf"
      adjust_ofs(ctx[:end_of_headers])
      put([@node_types.size].pack("v"))
      @node_types.each{|nn|
        put([nn.size].pack("v"))
        put(nn)
      }
    else
      raise "No idea what to do with #{element} close"
    end
  end
  
  def on_characters(chars)
    if @stack[-1][:chara]
      @stack[-1][:buf] << chars
    else
      raise "Illegal place for non-whitespace characters: #{@stack[-1].inspect}" if chars =~ /\S/
    end
  end
end

begin
  esf = EsfBuilder.new
  parser = XML::SaxParser.io(STDIN)
  parser.callbacks = esf
  parser.parse
  print esf.data
ensure
#  STDERR.puts esf.stack.inspect
end
