#!/usr/bin/env ruby

require "fileutils"

class SampleTest
  def initialize(filename)
    @filename = filename
  end
  def source
    "samples/#{@filename}"
  end
  def xmldir
    "tmp/" + @filename.gsub(".", "_") + "_dir"
  end
  def recreated
    "tmp/recreated_#{@filename}"
  end
  def size
    File.size(source)
  end
  def ruby
    # %W[time jruby --server -J-Xmx2048m]
    # %W[ruby]
    %W[ruby1.9]
  end
  def convert!
    puts "Converting #{@filename}"
    FileUtils.rm_rf xmldir
    system *(ruby + ["./esf2xml", source, xmldir])
  end
  def convert_back!
    puts "Recreating #{@filename}"
    FileUtils.rm_rf recreated
    system *(ruby + ["./xml2esf", xmldir, recreated])
  end
  def compare!
    system "diff", source, recreated
  end
  def run!
    convert! or return 1
    convert_back! or return 1
    compare!
  end
end

sample_tests = [
  "bmd.dat",
  "pathfinding.esf",
  "pathfinding_etw.esf",
  "poi.esf",
  "poi_global_map.esf",
  "regions.esf",
  "sea_grids.esf",
  "startpos.esf",
  "trade_routes.esf",

  "pathfinding_spanish.esf",

  # "campaign_sho_castle_1_fort.esf",
  # "campaign_sho_castle_2_stronghold.esf",
  # "campaign_sho_castle_3_fortress.esf",
  # "campaign_sho_castle_4_castle.esf",
  # "campaign_sho_castle_5_citadel.esf",
  "sho_sea_grids.esf",
  "sho_poi.esf",
  "sho_campaign.tree_list",
  "sho_pathfinding.esf",
  "sho_regions.esf",
  "sho_startpos.esf",
  
  "ntw_eur_startpos.esf",
  "ntw_egy_startpos.esf",
  "ntw_ita_startpos.esf",
  "ntw_tut_startpos.esf",
  
  "startpos_boshin.esf",
  "startpos_boshin_nested.esf",
].map{|filename| SampleTest.new(filename)}.sort_by(&:size)

FileUtils.mkdir_p "tmp"
sample_tests.each do |test|
  test.run!
end
