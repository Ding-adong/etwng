#!/usr/bin/env ruby

require "pp"

class Float
  def pretty_single
    rv = (((100_000.0 * self).round / 100_000.0) rescue self)
    return rv if [self].pack("f") == [rv].pack("f")
    self
  end
end

class String
  def utf16_to_utf8
    unpack("v*").pack("U*")
  end
  def utf8_to_utf16
    unpack("U*").pack("v*")
  end
end

class CS2File
  attr_reader :data, :ofs
  def initialize(path)
    @data = File.open(path, "rb").read
    @ofs  = 0
  end
  def size
    @data.size
  end
  def get(n)
    rv, @ofs = @data[@ofs, n], @ofs+n
    rv
  end
  def get_flt
    get(4).unpack("f")[0].pretty_single
  end
  def get_u4
    get(4).unpack("V")[0]
  end
  def get_u2
    get(2).unpack("v")[0]
  end
  def get_str
    get(2*get_u2).unpack("v*").pack("U*")
  end
end

files_simple = %W[
  samples/rigidmodels-buildings-prop_field_treestump_large-prop_field_treestump_large_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_treestump_small-prop_field_treestump_small_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_wheelbarrow-prop_field_wheelbarrow_tech.cs2.parsed
  samples/buildings-prop_field_tent_med-prop_field_tent_med_tech.cs2.parsed
  samples/buildings-prop_field_tent_small-prop_field_tent_small_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_tent_med-prop_field_tent_med_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_tent_small-prop_field_tent_small_tech.cs2.parsed
  samples/buildings-prop_field_haybale_bundle02-prop_field_haybale_bundle02_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_haybale_bundle02-prop_field_haybale_bundle02_tech.cs2.parsed
  samples/buildings-prop_field_cart-prop_field_cart_tech.cs2.parsed
  samples/buildings-prop_field_tent_large-prop_field_tent_large_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_cart-prop_field_cart_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_tent_large-prop_field_tent_large_tech.cs2.parsed
  samples/buildings-native_teepee02-native_teepee02_tech.cs2.parsed
  samples/rigidmodels-buildings-native_teepee02-native_teepee02_tech.cs2.parsed
  samples/buildings-fmv_cross2-fmv_cross2_tech.cs2.parsed
  samples/buildings-fmv_cross3-fmv_cross3_tech.cs2.parsed
  samples/buildings-fmv_cross4-fmv_cross4_tech.cs2.parsed
  samples/buildings-fmv_mayflower-fmv_mayflower_tech.cs2.parsed
  samples/buildings-fmv_rowboat-fmv_rowboat_tech.cs2.parsed
  samples/buildings-fmv_thirdrate-fmv_thirdrate_tech.cs2.parsed
  samples/rigidmodels-buildings-fmv_cross2-fmv_cross2_tech.cs2.parsed
  samples/rigidmodels-buildings-fmv_cross3-fmv_cross3_tech.cs2.parsed
  samples/rigidmodels-buildings-fmv_cross4-fmv_cross4_tech.cs2.parsed
  samples/rigidmodels-buildings-fmv_mayflower-fmv_mayflower_tech.cs2.parsed
  samples/rigidmodels-buildings-fmv_rowboat-fmv_rowboat_tech.cs2.parsed
  samples/rigidmodels-buildings-fmv_thirdrate-fmv_thirdrate_tech.cs2.parsed
  samples/buildings-american_fence-american_fence_tech.cs2.parsed
  samples/buildings-american_fenceend-american_fenceend_tech.cs2.parsed
  samples/buildings-american_gaet-american_gaet_tech.cs2.parsed
  samples/buildings-american_stile-american_stile_tech.cs2.parsed
  samples/buildings-prop_field_trough-prop_field_trough_tech.cs2.parsed
  samples/rigidmodels-buildings-american_fence-american_fence_tech.cs2.parsed
  samples/rigidmodels-buildings-american_fenceend-american_fenceend_tech.cs2.parsed
  samples/rigidmodels-buildings-american_gaet-american_gaet_tech.cs2.parsed
  samples/rigidmodels-buildings-american_stile-american_stile_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_trough-prop_field_trough_tech.cs2.parsed
  samples/buildings-native_teepee01-native_teepee01_tech.cs2.parsed
  samples/rigidmodels-buildings-native_teepee01-native_teepee01_tech.cs2.parsed
  samples/buildings-prop_field_applebarrels-prop_field_applebarrels_tech.cs2.parsed
  samples/buildings-prop_field_haybale-prop_field_haybale_tech.cs2.parsed
  samples/buildings-prop_field_stepladder-prop_field_stepladder_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_applebarrels-prop_field_applebarrels_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_haybale-prop_field_haybale_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_stepladder-prop_field_stepladder_tech.cs2.parsed
]
files_all = Dir["samples/*"]

files_simple.sort.each{|fn|
  next if File.basename(fn) =~ /\Atestdata/
  begin
    data = []

    cs2 = CS2File.new(fn)
    puts fn
    p (0..5).map{ cs2.get_flt }
    p cs2.get_str
    p (0..7).map{ cs2.get_flt }
    p (0..7).map{ cs2.get_flt }
    p cs2.get_u4
    p cs2.get_str
    p cs2.get_str
    p (0..7).map{ cs2.get_flt }
    p (0..7).map{ cs2.get_flt }
    p cs2.get_u4
    p cs2.get_str
    p cs2.get_u4
    p cs2.get_str
    pp (0...cs2.get_u4).map{ [cs2.get_flt, cs2.get_flt, cs2.get_flt] }

    p cs2.get(4).unpack("V")
    12.times {
      a, b = cs2.get(5).unpack("VC")
      p [a, b < 2 ? [false, true][b] : b, *cs2.get(19*4).unpack("V*")]
    }
    
    p (0..3).map{ cs2.get_u4 }
    p cs2.get_str
    p (0...cs2.get_u4).map{ [cs2.get_flt, cs2.get_flt, cs2.get_flt] }
    p (0..3).map{ cs2.get_u4 }
    p cs2.get(4*25).unpack("f*")

    p cs2.get(8).unpack("V*")
    p cs2.get(36).unpack("f*")
    
    puts "#{cs2.size - cs2.ofs} bytes to go" 
    puts ""
    
    

    break
    
  rescue
    puts "FAIL #{fn}: #{$!}"
  end
}
