#!/usr/bin/env ruby

require "pp"
require "fileutils"
require "stringio"

class Float
  def pretty_single
    rv = (((100_000.0 * self).round / 100_000.0) rescue self)
    return rv if [self].pack("f") == [rv].pack("f")
    self
  end
end

class String
  def utf16_to_utf8
    unpack("v*").pack("U*")
  end
  def utf8_to_utf16
    unpack("U*").pack("v*")
  end
end

class CS2File
  attr_reader :data, :ofs
  def initialize(path)
    @data = File.open(path, "rb").read
    @ofs  = 0
  end
  def size
    @data.size
  end
  def bytes_left
    size - ofs
  end
  def get(n)
    raise "Trying to read past end of file" unless size - ofs >= n
    rv, @ofs = @data[@ofs, n], @ofs+n
    rv
  end
  def get_flt
    get(4).unpack1("f").pretty_single
  end
  def get_v2
    [get_flt, get_flt]
  end
  def get_v3
    [get_flt, get_flt, get_flt]
  end
  def get_z4
    v = get_u4
    warn "Expected 0, got #{v}" unless v == 0
    v
  end
  def get_u4
    get(4).unpack1("V")
  end
  def get_i4
    get(4).unpack1("V")
  end
  def get_u2
    get(2).unpack1("v")
  end
  def get_str
    get(2*get_u2).unpack("v*").pack("U*")
  end
  def get_u4_ary(&blk) # means u4-indexed, not of-u4
    (0...get_u4).map(&blk)
  end
  def get_v3a
    get_u4_ary{ get_v3 }
  end
  def get_primary_data_array
    get_u4_ary{|i|
      a, b = get(5).unpack("VC")
      raise "ALMOST-FAIL: Expected #{i}, got #{a} as row index" if a != i
      [b < 2 ? [false, true][b] : b, *get(19*4).unpack("l*")]
    }
  end
  def get_collision3d
    data = [get_str, get_v3a, get_primary_data_array]
    ["Collision(#{data[1].size}x/#{data[2].size}x)", data[0], data[1], data[2]]
  end

  def unpack!
    txt = []
    success = false
    begin
      txt << [:flt6, (0..5).map{ get_flt }]
      txt << [:str, get_str]
      txt << [:flt8, (0..7).map{ get_flt }]
      txt << [:flt8, (0..7).map{ get_flt }]

      txt << [:uss, get_u4, get_str, get_str]
      txt << [:flt8, (0..7).map{ get_flt }]
      txt << [:flt8, (0..7).map{ get_flt }]

      # Levels of destruction ???
      cnt = get_u4
      txt << [:cnt, cnt]

      cnt.times{|i|
        txt << [:nth, i]
        txt << [:str_a, get_str]
        seq_num = get_u4
        txt << [:seq_num, seq_num, :expected, i] # Sequential number
        txt << get_collision3d
        txt << get_u4_ary{ get_collision3d } # Windows
        txt << get_u4_ary{ get_collision3d } # Doors
        txt << get_u4_ary{ get_collision3d } # Gates


        txt << [:ofs, ofs]
        txt << [:str_b, get_u4, get_str]
        txt << [:v3a, get_v3a]

        txt << [:ofs, ofs]

        txt << [:mystery, get_u4]

        txt << [:pipes, get_u4_ary{
          [get_str, get_u4_ary{ get_v3 }, get_u4]
        }]
        txt << [:mystery, get_u4]
        txt << [:mystery2, get_u4_ary{ [get_flt, get_flt, get_u4] }]

        txt << [:ofs, ofs]

        txt << [:mystery3] + get(13*4).unpack("V*").map{|u|
          if u > 256*256*256 then [u].pack("V").unpack1("f") else u end
        }
      }
      txt << [:ofs, ofs]

      u = get_u4

      txt << [:footer_size, u]
      txt << [:footer1, (0...u).map{ get_u4_ary{ get_v2 } }]
      txt << [:footer2, (0...u).map{ get_u4_ary{ get_v2 } }]

      success = true if bytes_left == 0
    rescue
      txt << "FAIL: #{$!}"
      [txt, false]
    end
    txt << [:bytes_to_go, bytes_left, :total_size, size]
    txt << [:ofs, ofs]
    [txt, success]
  end
end

def cs2_unpack(path_in, path_out)
  cs2 = CS2File.new(path_in)
  txt, status = cs2.unpack!
  File.open(path_out, 'w'){|fhout|
    fhout.puts "["
    fhout.puts txt.map{|r|
      out = StringIO.new
      PP.pp(r, out, 120)
      out.string.chomp + ","
    }
    fhout.puts "]"
  }
  return status
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} file.cs2.parsed file.txt"
  exit 1
end

path_in, path_out = *ARGV
status = cs2_unpack(path_in, path_out)
exit(status ? 0 : 1)
