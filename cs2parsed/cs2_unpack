#!/usr/bin/env ruby

require "pp"
require "fileutils"
require "pathname"

class Float
  def pretty_single
    rv = (((100_000.0 * self).round / 100_000.0) rescue self)
    return rv if [self].pack("f") == [rv].pack("f")
    self
  end
end

class String
  def utf16_to_utf8
    unpack("v*").pack("U*")
  end
  def utf8_to_utf16
    unpack("U*").pack("v*")
  end
end

class CS2File
  attr_reader :data, :ofs
  def initialize(path)
    @data = File.open(path, "rb").read
    @ofs  = 0
  end
  def size
    @data.size
  end
  def bytes_left
    size - ofs
  end
  def get(n)
    raise "Trying to read past end of file" unless size - ofs >= n
    rv, @ofs = @data[@ofs, n], @ofs+n
    rv
  end
  def get_flt
    get(4).unpack("f")[0].pretty_single
  end
  def get_v2
    [get_flt, get_flt]
  end
  def get_v3
    [get_flt, get_flt, get_flt]
  end
  def get_z4
    v = get_u4
    warn "Expected 0, got #{v}" unless v == 0
    v
  end
  def get_u4
    get(4).unpack("V")[0]
  end
  def get_i4
    get(4).unpack("V")[0]
  end
  def get_u2
    get(2).unpack("v")[0]
  end
  def get_str
    get(2*get_u2).unpack("v*").pack("U*")
  end
  def get_u4_ary(&blk) # means u4-indexed, not of-u4
    (0...get_u4).map(&blk)
  end
  def get_v3a
    get_u4_ary{ get_v3 }
  end
  def get_primary_data_array
    get_u4_ary{|i|
      a, b = get(5).unpack("VC")
      raise "ALMOST-FAIL: Expected #{i}, got #{a} as row index" if a != i
      [b < 2 ? [false, true][b] : b, *get(19*4).unpack("l*")]
    }
  end
  def get_collision3d
    data = [get_str, get_v3a, get_primary_data_array.size]
    ["Collision(#{data[0]}, #{data[1].size}x/#{data[2].size}x)", data[1], data[2]]
  end
end

files_sample = %W[
  samples/buildings-prop_field_applebarrels-prop_field_applebarrels_tech.cs2.parsed
  samples/rigidmodels-buildings-american_gaet-american_gaet_tech.cs2.parsed
  samples/buildings-fmv_rowboat-fmv_rowboat_tech.cs2.parsed
  samples/rigidmodels-buildings-native_teepee02-native_teepee02_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_cart-prop_field_cart_tech.cs2.parsed
  samples/buildings-prop_field_haybale_bundle02-prop_field_haybale_bundle02_tech.cs2.parsed
  samples/buildings-prop_field_tent_small-prop_field_tent_small_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_treestump_large-prop_field_treestump_large_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_field_haysheaf-prop_field_haysheaf_tech.cs2.parsed
  samples/buildings-north_euro_house07a-north_euro_house07a_tech.cs2.parsed
  samples/buildings-east_euro_house08b-east_euro_house08b_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_town_ottoman_stall01-prop_town_ottoman_stall01_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_town_plant_pot02-prop_town_plant_pot02_tech.cs2.parsed
]

files_sample_small = %W[
  samples/buildings-prop_field_applebarrels-prop_field_applebarrels_tech.cs2.parsed
  samples/rigidmodels-buildings-american_gaet-american_gaet_tech.cs2.parsed
  samples/buildings-east_euro_house08b-east_euro_house08b_tech.cs2.parsed
  samples/rigidmodels-buildings-prop_town_plant_pot02-prop_town_plant_pot02_tech.cs2.parsed

  samples/buildings-ottoman_warehouse04-ottoman_warehouse04_tech.cs2.parsed
]

files_all = Dir["samples/*"].sort_by{|fn| [File.size(fn), fn]}

# This looks misparsed:
# samples/buildings-fort_euro_wooden-fort_euro_wooden_tech.cs2.parsed

files_to_process = ARGV.empty? ? files_all : ARGV

FileUtils.mkdir_p "out"

files_to_process.each{|fn|
  fnout = "out/" + File.basename(fn).sub(/\.cs2\.parsed\z/, "") + ".txt"
  txt = []

  cs2 = CS2File.new(fn)
  puts fn
  
  begin
    txt << (0..5).map{ cs2.get_flt }
    txt << cs2.get_str
    txt << (0..7).map{ cs2.get_flt }
    txt << (0..7).map{ cs2.get_flt }

    txt << [cs2.get_u4, cs2.get_str, cs2.get_str]
    txt << (0..7).map{ cs2.get_flt }
    txt << (0..7).map{ cs2.get_flt }

    # Levels of destruction ???
    cnt = cs2.get_u4
    txt << [:cnt, cnt]

    cnt.times{|i|
      txt << [:nth, i]
      txt << [:str_a, cs2.get_str]
      seq_num = cs2.get_u4
      txt << [:seq_num, seq_num, :expected, i] # Sequential number
      txt << cs2.get_collision3d
      txt << cs2.get_u4_ary{ cs2.get_collision3d } # Windows
      txt << cs2.get_u4_ary{ cs2.get_collision3d } # Doors
      txt << cs2.get_u4_ary{ cs2.get_collision3d } # Gates


      txt << [:ofs, cs2.ofs]
      txt << [:str_b, cs2.get_u4, cs2.get_str]
      txt << cs2.get_v3a


      txt << [:ofs, cs2.ofs]
      # Why 41 ???
      
      num_a = cs2.get_u4
      txt << [:mystery, num_a]
      
      txt << [:pipes, cs2.get_u4_ary{
        [cs2.get_str, cs2.get_u4_ary{ cs2.get_v3}, cs2.get_u4]
        
      }]
      txt << [:mystery, cs2.get_u4]
      txt << [:mystery2, cs2.get_u4_ary{ [cs2.get_flt, cs2.get_flt, cs2.get_u4] }]
      
      txt << [:ofs, cs2.ofs]
  
      txt << [:mystery3] + cs2.get(52).unpack("V*").map{|u|
        if u > 256*256*256 then [u].pack("V").unpack("f")[0] else u end
      }
    }
    txt << [:ofs, cs2.ofs]

    u = cs2.get_u4
    
    txt << [:footer_size, u]
    txt << [:footer1, (0...u).map{
      cs2.get_u4_ary{ cs2.get_v2 }
    }]

    txt << [:footer2, (0...u).map{
      cs2.get_u4_ary{ cs2.get_v2 }
    }]
  

    txt << "#{cs2.bytes_left}/#{cs2.size} bytes to go" 
    txt << "ofs: #{cs2.ofs}"
    File.open(fnout, 'w'){|fhout|
      fhout.puts txt.map(&:inspect)
    }
  rescue
    txt << "FAIL #{fn}: #{$!}"
    txt << "#{cs2.bytes_left}/#{cs2.size} bytes to go" 
    txt << "ofs: #{cs2.ofs}"
    File.open(fnout, 'w'){|fhout|
      fhout.puts txt.map(&:inspect)
    }
  end
}
