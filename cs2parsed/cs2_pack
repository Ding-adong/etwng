#!/usr/bin/env ruby

require "pp"

class CS2File
  attr_reader :data
  def initialize(stream)
    @data = ""
    @stream = stream
  end
  def ofs
    @data.size
  end
  
  def put_flt(v)
    @data << [v].pack("f")
  end
  def put_flts(vs)
    @data << vs.pack("f" * vs.size)
  end
  def put_u2(v)
    @data << [v].pack("v")
  end
  def put_u4(v)
    @data << [v].pack("V")
  end
  def put_str(s)
    s = s.unpack("U*").pack("v*")
    put_u2(s.size/2)
    @data << s
  end  
  def put_v3a(v3s)
    @data << [v3s.size].pack("V")
    v3s.each{|v3| put_flts(v3)}
  end
  def put_primary_data_array(pda)
    warn "No idea how to pack PDA"
    pp pda

  end  
  def put_collision3d(tok)
    unless tok[0] =~ /\ACollision\((\d+)x\/(\d+)x\)\z/
      raise "Expected: Colission(Nx/Mx)"
    end
    d1sz, d2sz = $1.to_i, $2.to_i
    name = tok[1]
    v3a  = tok[2]
    pda  = tok[3]
    raise "Expected v3a size equal to #{d1sz}, got #{v3a.size}" unless d1sz == v3a.size
    raise "Expected primary data array size equal to #{d2sz}, got #{pda.size}" unless d2sz == pda.size

    put_str tok[1]
    put_v3a(v3a)
    put_primary_data_array(pda)

  end
  def put_array_of_collision3d(tok)
    put_u4 tok.size
    tok.each{|t|
      put_collision3d t
    }
  end
  
  def shift_stream
    while true
      return nil if @stream.empty?
      tok = @stream.shift
      unless tok.is_a?(Array)
        raise "Expected correctly formatted token, got: #{tok.inspect}"
      end
      if tok[0] == :ofs
        assert_ofs!(tok[1])
      elsif tok[0] == :bytes_to_go
        warn "Expected 0 bytes to be left, got #{tok[1]} instead" if tok[1] == 0
        assert_ofs!(tok[3])
      else
        return tok
      end
    end
  end

  def assert_ofs!(expected_ofs)
    warn "Expected offset: #{expected_ofs}, got instead: #{ofs}" unless ofs == expected_ofs
  end
  
  def assert_end_of_stream!
    tok = shift_stream
    raise "Tokens left after end of stream" unless tok.nil?
  end
  
  def shift_token(type)
    tok = shift_stream
    raise "Expected token #{type} got end of stream" unless tok
    raise "Expected token #{type} got #{tok[0]}" unless tok[0] == type
    tok[1..-1]
  end
  
  def repack!
    put_flts shift_token(:flt6)[0]
    put_str shift_token(:str)[0]
    put_flts shift_token(:flt8)[0]
    put_flts shift_token(:flt8)[0]

    u,s1,s2 = shift_token(:uss)
    put_u4 u
    put_str s1
    put_str s2
    put_flts shift_token(:flt8)[0]
    put_flts shift_token(:flt8)[0]
    
    cnt = shift_token(:cnt)[0]
    put_u4 cnt
    
    cnt.times{
      i = shift_token(:nth) # It doesn't actually do anything

      put_str shift_token(:str_a)[0]
      seq_num = shift_token(:seq_num)[1]
      put_u4 seq_num
      
      put_collision3d(shift_stream)
      put_array_of_collision3d(shift_stream)
      put_array_of_collision3d(shift_stream)
      put_array_of_collision3d(shift_stream)
      
      put_str shift_token(:str_b)[0]
      put_flts shift_token(:v3)[0]
      
      put_u4 shift_token(:mystery)

      # txt << [:pipes, get_u4_ary{
      #   [get_str, get_u4_ary{ get_v3 }, get_u4]
      # }]
      # txt << [:mystery, get_u4]
      # txt << [:mystery2, get_u4_ary{ [get_flt, get_flt, get_u4] }]
      # 
      # txt << [:mystery3] + get(13*4).unpack("V*").map{|u|
      #   if u > 256*256*256 then [u].pack("V").unpack("f")[0] else u end
      # }
    }

    # txt << [:footer_size, u]
    # txt << [:footer1, (0...u).map{ get_u4_ary{ get_v2 } }]
    # 
    # txt << [:footer2, (0...u).map{
    #   get_u4_ary{ get_v2 }
    # }]

    assert_end_of_stream!
  end
end

def cs2_pack(path_in, path_out)
  stream = eval(File.open(path_in, 'rb', &:read))
  cs2 = CS2File.new(stream)
  cs2.repack!
  File.open(path_out, 'wb'){|fh|
    fh.print cs2.data
  }
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} file.txt file.cs2.parsed"
  exit 1
end

path_in, path_out = *ARGV
cs2_pack(path_in, path_out)
