#!/usr/bin/env ruby

require "rubygems"
require "nokogiri"
require "pp"

class XSD2SX
  attr_reader :path_in, :path_out

  def initialize(path_in, path_out)
    @path_in = path_in
    @path_out = path_out
  end

  def xsd_doc
    @xsd_doc ||= Nokogiri::XML.parse(File.open(path_in, 'rb', &:read))
  end

  def parse_selector(sel)
    x = sel["xpath"]
    x =~ /\A\.\/\/(.*)/ ? $1 : raise("Wrong table reference #{x}")
  end
  
  def parse_fieldref(fieldref)
    x = fieldref["xpath"]
    x =~ /\A@(.*)/ ? $1 : raise("Wrong field reference #{x}")
  end
  
  def uniques
    @uniques ||= xsd_doc.xpath("/xs:schema/xs:element/xs:unique").map{|uq|
      raise "Only primary key unique keys supported" unless uq["PrimaryKey"] == "true"
      selector = uq.xpath("xs:selector").map{|f| parse_selector(f)}
      fields = uq.xpath("xs:field").map{|f| parse_fieldref(f)}
      raise "Exactly one selector required in unique key: #{uq}" unless selector.size == 1
      [uq["name"], selector[0], *fields]
    }
  end

  def keyrefs
    @keyrefs ||= xsd_doc.xpath("/xs:schema/xs:element/xs:keyref").map{|kr|
      selector = kr.xpath("xs:selector").map{|f| parse_selector(f)}
      fields = kr.xpath("xs:field").map{|f| parse_fieldref(f)}
      raise "Exactly one selector required in keyref: #{kr}" unless selector.size == 1
      raise "Exactly one field required in keyref: #{kr}" unless fields.size == 1
      [kr["refer"], selector[0], fields[0]]
    }
  end

  def parse_field(field)
    ht = {}
    field.each{|k,v|
      ht[k] = v.value
    }
    ht0 = ht.dup
    name = ht.delete("name")
    version_start = ht.delete("VersionStart")
    type = ht.delete("type").sub(/\Axs:/, "")
    if ht == {"use" => "required"}
      # DONE
    elsif type == "string" and ht == {"Optional" => "true"}
      type = "optstring"
    elsif type == "string" and ht.keys.sort == ["BlobLength", "use"] and ht["use"] == "required"
      type = "blob#{ht["BlobLength"]}"
    else
      raise "Unrecognized field type: #{ht0.inspect}"
    end
    {:name => name, :type => type, :version_start => version_start}
  end
  
  def types
    @types ||= xsd_doc.xpath("/xs:schema/xs:complexType").map{|ct|
      name = ct["name"]
      fields = ct.xpath("xs:attribute").map{|f|
        parse_field(f.attributes)
      }
      [name, *fields]
    }
  end

  # Gather schema info
  def run!
    schema = {}
    types.each{|name, *fields|
      schema[name] = fields
    }
    uqs = {}
    uniques.each{|name, table, *fields|
      uqs[name] = [table, *fields]
      fields.each{|f|
        schema[table].find{|field| field[:name] == f}[:pk] = true
      }
    }
    keyrefs.each{|ref, table, field|
      foreign_pk = uqs[ref]
      raise "Reference #{ref} leads to multicolumn primary key" unless foreign_pk.size == 2
      ftable, ffield = *foreign_pk
      schema[table].find{|f| f[:name] == field}[:fkey] = "#{ftable}.#{ffield}"
    }
    pp schema
  end
end



unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} DB.xsd schema.xml"
  exit 1
end

path_in, path_out = *ARGV
XSD2SX.new(path_in, path_out).run!


__END__


<xs:schema id="DBDataSet" targetNamespace="http://etw-mod-tools.sourceforge.net/"
  xmlns:mstns="http://etw-mod-tools.sourceforge.net/" xmlns="http://etw-mod-tools.sourceforge.net/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata"
  xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="unqualified" elementFormDefault="qualified" msdata:schemafragmentcount="2">

        <xs:complexType name="_kv_fatigue_tables">
                <xs:attribute name="Key" type="xs:string" use="required" />
                <xs:attribute name="Value" type="xs:float" use="required" />
        </xs:complexType>

        
        
        
        
          
        <xs:element name="DBDataSet">
                <xs:complexType>
                        <xs:choice minOccurs="0" maxOccurs="unbounded">
                                <xs:element name="_kv_fatigue_tables" form="unqualified" type="mstns:_kv_fatigue_tables" />
                                <xs:element name="_kv_morale_tables" form="unqualified" type="mstns:_kv_morale_tables" />
                                <xs:element name="_kv_naval_morale_tables" form="unqualified" type="mstns:_kv_naval_morale_tables" />
                                <xs:element name="_kv_rules_tables" form="unqualified" type="mstns:_kv_rules_tables" />
                                <xs:element name="abilities_tables" form="unqualified" type="mstns:abilities_tables" />

                                
                                
                                
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//_kv_fatigue_tables" />
      <xs:field xpath="@Key" />
    </xs:unique>

    <xs:keyref name='cai_personalities_tables_unknown4__TO__campaign_ai_personalities_PrimaryKey' refer='campaign_ai_personalities_tables_Constraint1'>
      <xs:selector xpath='.//cai_personalities_tables'/>
      <xs:field xpath='@unknown4'/>
    </xs:keyref>
  </xs:element>
