#!/usr/bin/env ruby

require "pp"
require "pathname"

class Float
  def pretty_single
    begin
      rv = (100_000.0 * self).round / 100_000.0
      return rv if self != rv and [self].pack("f") == [rv].pack("f")
      self
    rescue
      self
    end
  end
end

class ModelsBuildings
  def initialize(file_name)
    @path = Pathname(file_name)
    raise "#{@path}is a directory, regular file expected" if @path.directory?
    @data = @path.open("rb", &:read)
    @ofs = 0
  end

  def get(sz)
    raise "#{@path}: Not enough data available" if sz+@ofs > @data.size
    rv = @data[@ofs, sz]
    @ofs += sz
    rv
  end

  def get_u1
    get(1).unpack1("C")
  end
  def get_u2
    get(2).unpack1("v")
  end
  def get_u4
    get(4).unpack1("V")
  end
  def get_flt
    get(4).unpack1("f").pretty_single
  end
  def get_ascii
    get(get_u2)
  end
  def get_str
    get(2*get_u2).unpack("v*").pack("U*")
  end

  def parse_db_header!
    if @data[@ofs, 4] == "\xFD\xFE\xFC\xFF".b
      @ofs += 4
      @guid = get_str
    else
      @guid = nil
    end
    if @data[@ofs, 4] == "\xFC\xFD\xFE\xFF".b
      @ofs += 4
      @version = get_u1 + 1
      raise "DB header not recognized" unless get(4) == "\x00\x00\x00\x01".b
    elsif @data[@ofs, 1] == "\x01".b
      @ofs += 1
      @version = 1
    else
      raise "DB header not recognized"
    end
  end

  def get_v3
    {x: get_flt, y: get_flt, z: get_flt}
  end

  def get_ary(&blk)
    get_u4.times.map(&blk)
  end

  def get_model_v1
    [
      get_str,
      get_str,
      get_u4,
      get_ary.map{
        [
          get_str,
          get_u4,
          get_v3,
          get_v3,
          get_v3,
        ]
      }
    ]
  end

  def get_model_v4
    [
      get_u1,
      get_ascii,
      get_ascii,
      get_ascii,
      get_u4,
      get_ary.map{
        [
          get_str,
          get_u4,
          get_v3,
          get_v3,
          get_v3,
        ]
      },
      get_ary{
        [get_str, get_v3, get_v3]
      },
    ]
  end

  def parse
    parse_db_header!
    version_info = {:version => @version, :guid => @guid}

    case @version
    when 1
      # Empire / Napoleon / Shogun 2
      [version_info] + get_ary.map{ get_model_v1 }
    when 4
      # Rome 2
      [version_info] + get_ary.map{ get_model_v4 }
    else
      raise "Version #{@version} not supported"
    end
  end
end

unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} input output.txt"
  exit 1
end

data = ModelsBuildings.new(ARGV[0]).parse

File.open(ARGV[1], 'wb') do |fh|
  PP.pp(data, fh)
end
