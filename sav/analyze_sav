#!/usr/bin/env ruby

require "pp"

class String
  def to_hex
    unpack("C*").map{|b| "%02x" % b}.join(" ")
  end
end

class File
  def self.write(path, content)
    File.open(path, 'wb'){|fh|
      fh.write content
    }
  end
end

class BinaryFileParser
  attr_reader :data, :ofs

  def initialize(path)
    @data = File.open(path, 'rb', &:read)
    @ofs = 0
  end

  def size
    @data.size
  end
  def bytes_left
    size - ofs
  end
  def get(n)
    raise "Trying to read past end of file" unless size - ofs >= n
    rv, @ofs = @data[@ofs, n], @ofs+n
    rv
  end
  def get_flt
    get(4).unpack("f")[0].pretty_single
  end
  def get_u4
    get(4).unpack("V")[0]
  end
  def get_i4
    get(4).unpack("V")[0]
  end
  def get_u2
    get(2).unpack("v")[0]
  end
  def get_str
    get(2*get_u2).unpack("v*").pack("U*")
  end
  def get_ary(&blk)
    (0...get_u4).map(&blk)
  end
  def get_asciiz
    rv = ""
    while true
      c = get(1)
      break  if c == "\x00"
      rv << c
    end
    rv
  end
end

class AnalysisFormatter
  attr_reader :output_binary
  
  def initialize(data)
    @output = []
    @output_binary = "" # All data except section headers and strings, to verify
    @stack = [@output]
    @path_parts = [0]
    @data = data
    @indent = 0
  end
  
  def section_path
    @path_parts.join("/")
  end
  
  def start_special_section!(label)
    new_section = [:section, label + " path=#{section_path}"]
    @stack[-1] << new_section
    @stack << new_section
    @path_parts[-1] += 1
    @path_parts << 0
  end
  
  def start_section!(ofs, sz, tag)
    start_special_section! "Section #{ofs}...#{ofs+sz} datasize=#{sz-8} tag?=#{tag}"
  end
  
  def end_section!
    @stack.pop
    @path_parts.pop
  end
  
  # It assumes no gaps...
  def bytes!(ofs, sz)
    unless @stack[-1][-1] and @stack[-1][-1][0] == :bytes
      out! :bytes, ofs, 0
    end
    @output_binary << @data[ofs, sz]
    @stack[-1][-1][2] += sz
  end
  
  def string!(str)
    out! :str, str
  end

  def unicode!(str)
    out! :unicode, str
  end
  
  def out!(*token)
    @stack[-1] << token
  end

  def with_indent
    @indent += 1
    yield
  ensure
    @indent -= 1
  end

  def print_line!(str)
    puts(" " * @indent + "#{str}")
  end

  def pretty_print_bytes(raw)
    return nil if raw.size == 0

    rv  = []
    ofs = 0
    while ofs < raw.size and rv.size < 16
      if ofs+4 <= raw.size and ofs % 4 == 0 # assume 4byte-aligned
        i4 = raw[ofs, 4].unpack("l")[0]
        if i4 >= -1 and i4 <= 0xFF_FF
          rv << "u:#{i4}"
          ofs += 4
          next
        end
        f = raw[ofs, 4].unpack("f")[0]
        fa = f.abs
        if fa >= 0.001 and fa <= 1_000_000.0
          rv << "f:#{f}"
          ofs += 4
          next
        end
      end
      rv << raw[ofs, 1].to_hex
      ofs += 1
    end

    if ofs != raw.size
      rv << "..."
    end
    
    return "[" + rv.join(" ") + "]"

    # 
    # if raw.size <= 64 and raw.size % 4 == 0
    #   u4a = raw.unpack("l*")
    #   if u4a.all?{|u| u >=-1 and u <= 1024}
    #     return " [int32s: #{u4a.join(" ")}]"
    #   end
    # end
    # if raw.size <= 64 and raw.size % 4 == 0
    #   flts = raw.unpack("f*")
    #   if flts.all?{|f| f=f.abs; f == 0 or (f >= 0.001 and f <= 1_000_000.0)}
    #     return " [float32s: #{flts.join(" ")}]"
    #   end
    # end
    
    # if raw.size > 32
    #   " [hex: #{raw[0,32].to_hex}...]"
    # else
    #   " [hex: #{raw.to_hex}]"
    # end
  end

  def print_token!(token)
    case token[0]
    when :section
      print_line! token[1]
      with_indent{
        token[2..-1].each{|t|
          print_token! t
        }
      }
    when :raw
      print_line! token[1].to_s
    when :str, :unicode
      print_line! token[1].inspect
    when :bytes
      ofs = token[1]
      sz  = token[2]
      raw = @data[ofs, sz]
      ppb = pretty_print_bytes(raw)
      print_line! "Bytes #{ofs}...#{ofs+sz} size: #{sz}#{ppb}"
    else
      warn "Unknown token: #{token.inspect}"
    end
  end
  
  def print!
    @output.each{|t|
      print_token! t
    }
    # pp @output
    File.write("autosave.dump", @output_binary)
  end
end

# FIXME: This is pretty crappy, since some methods throw this, some return nil,
class LookaheadFailure < Exception
end

class SavFile < BinaryFileParser
  def initialize(path)
    super(path)
  end

  # throws on out of bound
  def lookahead_data(start_ofs, end_ofs, sz)
    raise LookaheadFailure.new if end_ofs - start_ofs < sz
    @data[start_ofs, sz]
  end

  # throws on out of bound
  def lookahead_u4(start_ofs, end_ofs)
    lookahead_data(start_ofs, end_ofs, 4).unpack("V")[0]
  end

  def lookahead_u2(start_ofs, end_ofs)
    lookahead_data(start_ofs, end_ofs, 2).unpack("v")[0]
  end

  # nil on out of bound
  # String format: [uint16 size in codepoints], UTF16-LE codepoints
  # Legal strings rejected due to false positives:
  # 00 00
  # 01 00 xx 00
  # Accepted:
  # 02 00 xx 00 xx 00
  def lookahead_unicode(start_ofs, end_ofs)
    sz  = lookahead_u2(start_ofs, end_ofs)
    return nil if sz <= 1
    str = lookahead_data(start_ofs+2, end_ofs, sz*2)
    # Pretty ridiculous regexp, but we need to be fast:
    return nil unless str =~ /\A(?:[\x09\x0a\x0d\x20-\x7e]\x00)*\z/
    str = str.unpack("v*").pack("U*")
    
    return [sz*2+2, str]
  rescue LookaheadFailure
    nil
  end

  # nil on out of bound
  # String format: [uint16 size in bytes (inclusive of \x00)], ASCII characters, last \x00
  # There might be "legal", but ignore them due to false positives:
  # * 00 00 
  # * 01 00 00
  # * 02 00 xx 00
  # This is accepted:
  # * 03 00 xx xx 00
  def lookahead_asciiz(start_ofs, end_ofs)
    sz  = lookahead_u2(start_ofs, end_ofs)
    return nil if sz <= 2
    str = lookahead_data(start_ofs+2, end_ofs, sz)
    return nil unless str[-1,1] == "\x00"
    str = str[0..-2]
    return nil unless str =~ /\A[\x09\x0a\x0d\x20-\x7e]*\z/
    
    return [sz+2, str]
  rescue LookaheadFailure
    nil
  end
  
  # nil on out of bound
  def lookahead_section_header(start_ofs, end_ofs)
    section_ofs = lookahead_u4(start_ofs, end_ofs)
    section_size = lookahead_u4(start_ofs+4, end_ofs)
    if section_ofs == start_ofs
      section_size
    else
      nil
    end
  rescue LookaheadFailure
    nil
  end

  def analyze_data!(start_ofs, end_ofs)
    @ofs = start_ofs
    while @ofs < end_ofs
      sz = lookahead_section_header(ofs, end_ofs)
      if sz
        section_end_ofs = ofs+sz
        @fmt.start_section!(ofs, sz, @data[ofs-2, 2].unpack("CC").join(" "))
        analyze_data!(ofs+8, section_end_ofs)
        @fmt.end_section!
        next
      end
      
      strx = lookahead_asciiz(ofs, end_ofs)
      if strx
        sz, str = *strx
        @fmt.string!(str)
        @ofs += sz
        next
      end
      
      strx = lookahead_unicode(ofs, end_ofs)
      if strx
        sz, str = *strx
        @fmt.unicode!(str)
        @ofs += sz
        next
      end
      
      @fmt.bytes! @ofs, 1
      @ofs += 1
    end
    @ofs = end_ofs
  end

  def analyze_header!
    @fmt.start_special_section! "File Header"

    magic = get(2)
    warn "Bad magic" unless magic == "\x06\x09"
    @fmt.out! :raw, "Magic number #{magic.to_hex}"

    @fmt.unicode! get_str

    @fmt.bytes! @ofs, 50
    @ofs += 50
    
    @fmt.unicode! get_str

    @fmt.bytes! @ofs, 1710
    @ofs += 1710

    big_table_sz = get_u4
    
    @fmt.start_special_section! "Header Strings Table (size=#{big_table_sz})"
    big_table_sz.times{|i|
      s = get_asciiz
      u = get_u4
      @fmt.out! :raw, "#{i}: #{s} = #{u}"
    }
    @fmt.end_section!

    @fmt.end_section!
  end

  def analyze!
    # Skip headers

    @fmt = AnalysisFormatter.new(@data)
    analyze_header!
    analyze_data!(ofs, size)
    @fmt
  end
end

samples = Dir["samples/*.sav"].sort

samples = ARGV unless ARGV.empty?

samples.each{|path|
  STDERR.puts "Parsing #{path}"
  sav = SavFile.new(path)
  fmt = sav.analyze!
  fmt.print!
  break
}
