#!/usr/bin/env ruby

require "pp"
require "find"
require "fileutils"
require "pathname"

class File
  def self.write(path, cnt)
    File.open(path, 'wb'){|fh| fh.write cnt}
  end
end

class UnitVariant
  def initialize(file_path)
    txt = File.open(file_path, 'rb', &:read)
    @data = eval(txt)
  end
  def version
    @data[0]
  end
  def header_size
    version == 0 ? 20 : 24
  end
  def categories
    @categories ||= @data[1..-1]
  end
  def divider
    header_size + categories.size * (512 + 4*4)
  end
  def header
    out = "VRNT"
    out << [version, categories.size, header_size, divider].pack("V*")
    out << [1].pack("V") if version == 2
    out
  end
  def s256(str)
    out = str.unpack("U*").pack("v*")
    raise "String longer than 256 characters" if out.size > 512
    out + "\x00" * (512 - out.size)
  end
  def rebuild_categories
    out = ""
    eq_total_cnt = 0
    categories.each{|cat_num, cat_name, *equipment|
      out << s256(cat_name)
      out << [cat_num, 0, equipment.size, eq_total_cnt].pack("VVVV")
      eq_total_cnt += equipment.size
    }
    out
  end
  def rebuild_equipment_item(eq)
    if eq.is_a?(String)
      s256(eq) + s256("") + "\x01\x00"
    else
      s256(eq[0]) + s256(eq[1]) + "\x00\x00"
    end
  end
  def rebuild_equipment
    out = ""
    categories.each{|cat_num, cat_name, *equipment|
      equipment.each{|eq|
        out << rebuild_equipment_item(eq)
      }
    }
    out
  end
  def rebuild
    header + rebuild_categories + rebuild_equipment
  end
  def save(file_path)
    File.write(file_path, rebuild)
  end
end
  
unless ARGV.size == 2
  STDERR.puts "Usage: #{$0} file.txt file.unit_variant"
  STDERR.puts "   or: #{$0} directory_in directory_out"
  exit 1
end

source = Pathname(ARGV[0])
target = Pathname(ARGV[1])

if source.directory?
  source.find do |source_file|
    next unless source_file.file?
    target_subdir   = target + source_file.dirname.relative_path_from(source)
    target_basename = source_file.basename(".txt").to_s + ".unit_variant"
    target_file = target_subdir + target_basename
    FileUtils.mkdir_p target_subdir
    UnitVariant.new(source_file).save(target_file)
  end
else
  UnitVariant.new(source).save(target)
end
