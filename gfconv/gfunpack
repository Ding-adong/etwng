#!/usr/bin/env ruby

require "pp"
require "yaml"

class Float
  def pretty_single
    rv = (((100_000.0 * self).round / 100_000.0) rescue self)
    if [self].pack("f") == [rv].pack("f")
      rv
    else
      self
    end
  end
end

class String
  def utf16_to_utf8
    unpack("v*").pack("U*")
  end
  def utf8_to_utf16
    unpack("U*").pack("v*")
  end
  def hexdump
    unpack("C*").map{|x| "%02X" % x}.join(" ")
  end
end

class GroupFormationsUnpacker
  def initialize(data)
    @data = data
    @ofs = 0
  end
  
  def get(sz)
    ofs0, @ofs = @ofs, @ofs+sz
    @data[ofs0...@ofs]
  end
  
  def get_flt
    get(4).unpack("f")[0].pretty_single
  end

  def get_u4
    get(4).unpack("V")[0]
  end

  def get_u2
    get(2).unpack("v")[0]
  end

  def get_i4
    get(4).unpack("i")[0]
  end

  def get_x4
    v =  get(4)
    "0x%X/%f" % [v.unpack("V")[0], v.unpack("f")[0].pretty_single]
  end
  
  def get_str
    get(get_u2*2).utf16_to_utf8
  end
  
  def get_factions
    (1..get_u4).map{ get_str }
  end

  def get_pairs
    cnt = get_u4
    raise "Line cannot contain 0 pairs" if cnt == 0
    (1..cnt).map{ [get_flt, get_i4] }
  end
  
  def get_line
    line_id   = get_u4
    line_type = get_u4
    out = case line_type
    when 0
      [
        :type0,
        [
          get_flt,
          get_flt,
          get_u4,

          get_flt,
          get_flt,
          get_flt,
          get_flt,

          get_u4,
          get_i4,
        ],
        get_pairs,
      ]
    when 1
      [
        :type1,
        [
          get_flt,
          get_u4,
          get_u4,

          get_flt,
          get_flt,
          get_flt,
          get_flt,

          get_u4,
          get_i4,
        ],
        get_pairs,
      ]
    when 3
      [:type3, *(1..get_u4).map{ get_u4 }]
    else
      raise "Unknown line type #{line_type}"
    end
    return [line_id, out]
  end
  
  def get_lines
    out = []
    sz, line = get_line
    out << line
    (1...sz).each{|i|
      j, line = get_line
      raise "Expected line id #{i} got #{j}" unless i == j
      out << line
    }
    out
  end
  
  def get_header
    [get_flt, get_u4, get_u4, get_u4, get_u4]
  end
  
  def get_formation
    {
      :name     => get_str,
      :header   => get_header,
      :factions => get_factions,
      :lines    => get_lines,
    }
  end
  
  def unpack
    cnt = get_u4
    out = (1..cnt).map{
      get_formation
    }
    raise "EOF expected at #{@ofs}" unless @ofs == @data.size
    out
  end
end

data = File.read("etw/groupformations.bin")
gfu = GroupFormationsUnpacker.new(data)
out = gfu.unpack

out.each{|form|
  PP.pp(form, STDOUT, 150)
  puts ""
}
